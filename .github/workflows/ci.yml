name: Masterbase Tests

on:
  push:
    branches: [ master ]    
  schedule:
      - cron: '0 0 * * *'
  pull_request:
    branches: [ master ]      

jobs:
# update ci header jobs
  php-tests:
    runs-on: ${{ matrix.os }}
    services:
      mysql:
        image: mysql:8.0.21
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: masterbase
          DB_HOST: mysql
          DB_USERNAME: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
# end ci header jobs
    strategy:
        matrix:
            php: [7.4]
            laravel: [8.*]
            dependency-version: [prefer-dist] # , prefer-stable
            os: [ubuntu-latest]
            env: [.env.test.db] # , .env.ci, .env.server
            phpstan: [4] # , 5, 6         
            include:
                - laravel: 8.*
                  testbench: 6.*

    env:
      extensions: intl, pcov
      key: cache-22 

    name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.env}} - ${{ matrix.dependency-version }} - ${{ matrix.os }}

    steps: 
    - uses: actions/checkout@master   
    - uses: actions/setup-node@v1
      with:
        node-version: '14.x'

    - name: Setup cache environment
      id: extcache
      uses: shivammathur/cache-extensions@v1
      with:
        php-version: ${{ matrix.php }}
        extensions: ${{ env.extensions }}
        key: ${{ env.key }}

    - name: Cache extensions
      uses: actions/cache@v2
      with:
        path: ${{ steps.extcache.outputs.dir }}
        key: ${{ steps.extcache.outputs.key }}
        restore-keys: ${{ steps.extcache.outputs.key }}    

    - name: Setup PHP
      uses: shivammathur/setup-php@v2 #vs @v2 for more detailed debugging
      with:
        php-version: ${{ matrix.php }}
        extensions: ${{ env.extensions }}
      env:
        COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        update: true
        tools: cs2pr, composer, php-cs-fixer, phpunit:9.*, phpstan
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, mysqli, intl, codecov # pcov
        ini-values: post_max_size=256M, short_open_tag=On             
        coverage: clover
        php-version: ${{ matrix.php-versions }}   

    - name: Composer install various testing tools
      run: |
        composer require nunomaduro/phpinsights --dev        
        php artisan vendor:publish --provider="NunoMaduro\PhpInsights\Application\Adapters\Laravel\InsightsServiceProvider"
        composer require --dev phpstan/phpstan
        
    - name: Get composer cache directory
      id: composercache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"          

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composercache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
#composer update  --${{ matrix.dependency-version }} --no-interaction --no-suggest      

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('${{ matrix.env }}', '.env');" 

    - name: Generate key
      run: php artisan key:generate
    
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Verify MySQL connection
      if: matrix.env == matrix.env    
      run: |
        mysql --version
        mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -e "SHOW DATABASES"

    - name: Env Set to Test DB, Setup
      if: matrix.env == '.env.test.db'
      env:
        DB_PORT: ${{ job.services.mysql.ports[3306] }}
      run: |
        sudo /etc/init.d/mysql start
        mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -e "SHOW DATABASES"
#       sudo systemctl start mysql -uroot        

#    - name: Env Set to Test DB, Migrate DB
#      if: matrix.env == '.env.test.db'
#      env:
#        DB_PORT: ${{ job.services.mysql.ports[3306] }}
#        MYSQL_ALLOW_EMPTY_PASSWORD: yes
#        MYSQL_DATABASE: masterbase 
#        DB_HOST: mysql
#        DB_USERNAME: root        
#      run: |
#        sudo /etc/init.d/mysql start
#        mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -e "SHOW DATABASES"
#        php artisan migrate

    - name: Env Set to CI Testing, Setup & Migrate DB
      if: matrix.env == '.env.ci'
      run: |
        mkdir -p database
        touch database/database.sqlite
        php artisan migrate  
      
#    - name: Env Set to Server, Setup & Migrate DB
#      if: matrix.env == '.env.server'
#      run: php artisan migrate          

    - name: Setup problem matchers for PHP
      run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"        

    - name: Setup problem matchers for PHPUnit
      run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json" 
      
    - name: PHP CS Fixer 
      run: php artisan fixer:fix       

    - name: PHPStan
      continue-on-error: true
      run: ./vendor/bin/phpstan analyse -l ${{ matrix.phpstan }} --memory-limit 1G --error-format=json
    
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: |
        mkdir reports
        ./vendor/bin/phpunit --coverage-clover coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.13
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
#        file: ./coverage.xml
#        files: ./coverage1.xml,./coverage2.xml
#        directory: ./coverage/reports/
#        flags: unittests
#        env_vars: OS,PYTHON
#        name: codecov-umbrella
        fail_ci_if_error: true
#        path_to_write_report: ./coverage/codecov_report.gz        

    - name: PHP Insights
      run: | 
        php -d memory_limit=2000M 
        php artisan insights -n --ansi --format=json > test.json

    - name: Artillery Tests
      run: |
        npm install --ignore-scripts
        npm install -g artillery --allow-root --unsafe-perm=true
        artillery -V
        artillery quick --count 10 -n 20 http://codica.com

    - name: Audit URLs using Lighthouse
      uses: treosh/lighthouse-ci-action@v3
      with:
        urls: https://www.foo.software
        budgetPath: ./budget.json # test performance budgets
        uploadArtifacts: true # save results as an action artifacts
        temporaryPublicStorage: true # upload lighthouse report to the temporary storage
 
    - name: ZAP Scan
      uses: zaproxy/action-baseline@master
      with:
        target: 'https://www.zaproxy.org'
        rules_file_name: './rules.tsv'
        fail_action: 'false'

    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with: 
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:   
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      if: always()  

    - name: Track Files Changed
      uses: lots0logs/gh-action-get-changed-files@2.1.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}                   

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
